#!/bin/sh
LAUNCHER=$(readlink -f "${0}")
HERE="$(dirname "${LAUNCHER}")"
cd "${HERE}/../lib/smath" || exit 1
VERSION="$(cat "${HERE}/VERSION")"

# APPIMAGE is an environment variable set by the runtime
# defining the absolute path to the .AppImage file
if [ -n "${APPIMAGE}" ]; then
	LAUNCHER=${APPIMAGE}

	# appimaged doesn't update the mime or icon caches when registering AppImages.
	# Run update-desktop-database and gtk-update-icon-cache ourselves if we detect
	# that the desktop file has been installed but the handler is not cached
	if command -v update-desktop-database > /dev/null; then
		APPIMAGEID=$(printf "file://%s" "${APPIMAGE}" | md5sum | cut -d' ' -f1)
		LAUNCHER_NAME="appimagekit_${APPIMAGEID}-smath.desktop"
		LAUNCHER_PATH="${HOME}/.local/share/applications/${LAUNCHER_NAME}"
		MIMECACHE_PATH="${HOME}/.local/share/applications/mimeinfo.cache"
		SCHEME="x-scheme-handler/smath-release-${VERSION}"
		if [ -f "${LAUNCHER_PATH}" ] && ! grep -qs "${SCHEME}=" "${MIMECACHE_PATH}"; then
			update-desktop-database "${HOME}/.local/share/applications"
			if command -v gtk-update-icon-cache > /dev/null; then
				gtk-update-icon-cache ~/.local/share/icons/hicolor/ -t
			fi
		fi
	fi
fi

# Run SMath
mono --debug SMathStudio_Desktop.exe "$@"
./${HERE}/restore-environment.sh

# Show a crash dialog if something went wrong
if [ $? != 0 ] && [ $? != 1 ]; then
	LOGS="${XDG_CONFIG_HOME:-${HOME}/.config}/SMath/Logs"
	if [ ! -d "${LOGS}" ] && [ -d "${HOME}/.SMath/Logs" ]; then
		LOGS="${HOME}/.SMath/Logs"
	fi

	test -d Support/Logs && LOGS="${PWD}/Support/Logs"
	ERROR_MESSAGE="SMath has encountered a fatal error.\nPlease refer to the crash logs and FAQ for more information.\n\nLog files are located in ${LOGS}\n"
	if command -v zenity > /dev/null; then
		zenity --no-wrap --error --title "SMath" --text "${ERROR_MESSAGE}" 2> /dev/null
	elif command -v kdialog > /dev/null; then
		kdialog --title "SMath" --error "${ERROR_MESSAGE}"
	elif "${HERE}/gtk-dialog.py" test > /dev/null; then
		"${HERE}/gtk-dialog.py" error --title "SMath" --text "${ERROR_MESSAGE}" 2> /dev/null
	else
		printf "${ERROR_MESSAGE}\n"
	fi
	exit 1
fi
